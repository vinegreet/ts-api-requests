{"version":3,"sources":["models/index.ts","context/DataContext.ts","helpers/localStorage.ts","components/ChooseTheFilm/ChooseTheFilm.tsx","components/ChosenFilm/ChosenFilm.tsx","components/Toc/Toc.tsx","components/App/App.tsx","context/dataReducer.ts","context/saveSetFavorite.ts","context/DataState.tsx","index.tsx"],"names":["initialState","favorites","films","selectedId","initFilms","selectItem","setFavorite","unsetFavorite","persistedState","serializedFavorites","localStorage","getItem","JSON","parse","err","loadFavorites","DataContext","createContext","ChooseTheFilm","className","ChosenFilm","film","useContext","episode_id","release_date","title","opening_crawl","year","split","isFavorited","includes","onClick","Toc","tocItems","sort","a","b","map","App","useEffect","fetch","response","json","data","results","window","alert","length","chosenFilm","find","reducer","state","action","type","payload","filter","item","saveSetFavorite","dispatch","id","actionType","Promise","resolve","reject","stringify","setItem","saveFavorites","then","catch","console","log","DataState","children","useReducer","dataReducer","valueState","updatedFavorites","Provider","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f90c9774.chunk.js","sourcesContent":["import { IDataStateFunctions } from './IData';\n\nexport const host = 'https://swapi.dev';\nexport const filmsEndpoint = '/api/films';\n\nexport const initialState: IDataStateFunctions = {\n  favorites: [],\n  films: [],\n  selectedId: null,\n  initFilms() {},\n  selectItem() {},\n  setFavorite() {},\n  unsetFavorite() {},\n}\n","import { createContext } from 'react';\nimport { initialState } from '../models';\nimport { IDataStateFunctions } from '../models/IData';\nimport { loadFavorites } from '../helpers/localStorage';\n\nexport const persistedState = {\n  ...initialState,\n  favorites: loadFavorites() ?? initialState.favorites,\n}\n\nconst DataContext = createContext<IDataStateFunctions>(persistedState);\n\nexport default DataContext;\n","export const loadFavorites = () => {\n  try {\n    const serializedFavorites = localStorage.getItem('favorites');\n    if (serializedFavorites === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedFavorites);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveFavorites = (favorites: number[]) => {\n  return new Promise((resolve, reject) => {\n    try {\n      const serializedFavorites = JSON.stringify(favorites);\n      localStorage.setItem('favorites', serializedFavorites);\n      resolve(null);\n    } catch (err) { \n      reject();\n    }\n  })\n};\n","import React from \"react\";\n\nimport './chooseTheFilm.css';\n\nconst ChooseTheFilm: React.FC = () => {\n  return (\n    <div className=\"choose-the-film\">\n      <div className=\"choose-the-film_title\">&larr; Please choose the film</div>\n    </div>\n  );\n}\n\nexport default ChooseTheFilm;","import React, { useContext } from 'react';\nimport DataContext from '../../context/DataContext';\nimport { IDataFilm } from '../../models/IData';\n\nimport './chosenFilm.css';\n\ninterface Props {\n  film: IDataFilm\n}\n\nconst ChosenFilm: React.FC<Props> = ({ film }) => {\n  const { favorites, setFavorite, unsetFavorite } = useContext(DataContext);\n  const { episode_id, release_date, title, opening_crawl } = film;\n  const year = (release_date ?? '').split('-')[0];\n  const isFavorited = favorites.includes(episode_id);\n\n  const favBtnClickHandler = ():void => {\n    if (!isFavorited) {\n      setFavorite(episode_id);\n    } else {\n      unsetFavorite(episode_id);\n    }\n  }\n\n  return (\n    <div className=\"chosen-film\">\n      <div className=\"chosen-film_header\">\n        <h3 className=\"chosen-film_title\">\n          Episode {episode_id}: {title} ({year})\n        </h3>\n      </div>\n      <p className=\"chosen-film_plot\">{opening_crawl}</p>\n      <button\n        onClick={favBtnClickHandler}\n        className={\n          `chosen-film_favorite-button favorite-button ${\n            isFavorited ? 'chosen-film_favorite-button--active' : ''\n          }`\n        }\n      >\n        <span className=\"favorite-button_inner favorite-button_inner--wrapper\">\n          <span className=\"favorite-button_inner favorite-button_inner--inner\">\n            {isFavorited ? 'Favorited ' : 'Favorite'}\n          </span>\n        </span>\n      </button>\n    </div>\n  );\n}\n\nexport default ChosenFilm;","import React, { useContext } from 'react';\nimport DataContext from '../../context/DataContext';\nimport { IDataFilm } from '../../models/IData';\n\nimport './toc.css';\n\nconst Toc: React.FC = () => {\n  const { films, selectedId, selectItem } = useContext(DataContext);\n\n  const clickHandler = (id: number) => {\n    selectItem(id);\n  };\n\n  const tocItems = films\n    .sort((a: IDataFilm, b: IDataFilm) => a.episode_id - b.episode_id)\n    .map((film: IDataFilm) => {\n      const { episode_id, release_date, title } = film;\n      const year = release_date.split('-')[0];\n\n      return (\n        <li\n          onClick={() => clickHandler(episode_id)}\n          className={`toc_item ${episode_id === selectedId ? 'toc_item--active' : ''}`}\n          key={title}\n        >\n          EP{episode_id}: {title} ({year})\n        </li>\n      );\n    });\n\n  return (\n    <ul className=\"toc\">\n      {tocItems}\n    </ul>\n  );\n}\n\nexport default Toc;","import React, { useEffect, useContext } from 'react';\nimport DataContext from '../../context/DataContext';\nimport { host, filmsEndpoint } from '../../models';\nimport { IApiFilmsData, IDataFilm } from '../../models/IData';\nimport ChooseTheFilm from '../ChooseTheFilm/ChooseTheFilm';\nimport ChosenFilm from '../ChosenFilm/ChosenFilm';\nimport Toc from '../Toc';\nimport './app.css';\n\nconst App: React.FC = () => {\n  const { films, initFilms, selectedId } = useContext(DataContext);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(`${host}${filmsEndpoint}`);\n        const data: IApiFilmsData = await response.json();\n        initFilms(data?.results);\n      } catch(error) {\n        window.alert(error) // TODO: handle failed request\n      }\n    })();\n    // eslint-disable-next-line\n  }, []);\n\n  if (films.length === 0) {\n    return (\n      <div className=\"app\">\n        Loading...\n      </div>\n    )\n  }\n\n  const chosenFilm = films.find((film: IDataFilm) => film.episode_id === selectedId);\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app_title\">Star Wars movies</h1>\n      <div className=\"app_content\">\n        <Toc />\n        {chosenFilm\n          ? <ChosenFilm film={chosenFilm} />\n          : <ChooseTheFilm />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { IDataState } from '../models/IData';\n\nexport interface IAction {\n  type: string\n  payload: any\n}\n\nconst reducer = (state: IDataState, action: IAction) => {\n  switch(action.type) {\n    case 'INIT_FILMS':\n      return {\n        ...state,\n        films: action.payload,\n      }\n\n    case 'SET_FAVORITE':\n      return {\n        ...state,\n        favorites: [ ...state.favorites, action.payload ],\n      };\n\n    case 'UNSET_FAVORITE':\n      return {\n        ...state,\n        favorites: state.favorites.filter((item) => item !== action.payload),\n      };\n\n    case 'SELECT_ITEM':\n      return {\n        ...state,\n        selectedId: action.payload,\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import { Dispatch } from \"react\";\nimport { IAction } from \"./dataReducer\";\nimport { saveFavorites } from '../helpers/localStorage';\n\nexport const saveSetFavorite = (\n  dispatch: Dispatch<IAction>,\n  favorites: number[],\n  id: number,\n  actionType: 'SET_FAVORITE' | 'UNSET_FAVORITE',\n): void => {\n  saveFavorites(favorites)\n    .then(() => {\n      dispatch({\n        type: actionType,// TODO: create actions types constants\n        payload: id,\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n      // If the local storage update fails, the favorite should not be added.\n      // TODO: looks like user's privacy mode does not allow the use of local storage. Show them a message about it.\n    });\n};\n","import React, { useReducer } from 'react';\nimport DataContext, { persistedState } from './DataContext';\nimport dataReducer from './dataReducer';\nimport { IDataFilm, IDataStateFunctions } from '../models/IData';\nimport { saveSetFavorite } from './saveSetFavorite';\n\nconst DataState: React.FC = ({ children }) => {\n  const [ state, dispatch ] = useReducer(dataReducer, persistedState);\n  const { favorites, films, selectedId } = state;\n\n  const initFilms = (films: IDataFilm[]): void => {\n    dispatch({\n      type: 'INIT_FILMS',\n      payload: films,\n    });\n  }\n\n  const setFavorite = (id: number): void => {\n    if (!favorites.includes(id)) {\n      const updatedFavorites = [ ...favorites, id ];\n      // For better debuggability, I pass the ID that should be added, and not the updated array\n      saveSetFavorite(dispatch, updatedFavorites, id, 'SET_FAVORITE');\n    }\n  };\n\n  const unsetFavorite = (id: number): void => {\n    if(favorites.includes(id)) {\n      const updatedFavorites = favorites.filter((item) => item !== id);\n      // For better debuggability, I pass the ID that should be removed, and not the updated array\n      saveSetFavorite(dispatch, updatedFavorites, id, 'UNSET_FAVORITE');\n    }\n  }\n\n  const selectItem = (id: number): void => {\n    if (id !== selectedId) {\n      dispatch({\n        type: 'SELECT_ITEM',\n        payload: id,\n      });\n    }\n  };\n\n  const valueState: IDataStateFunctions = {\n    favorites,\n    films,\n    selectedId,\n    initFilms,\n    selectItem,\n    setFavorite,\n    unsetFavorite,\n  };\n\n  return (\n    <DataContext.Provider value={valueState}>\n      {children}\n    </DataContext.Provider>\n  );\n}\n\nexport default DataState;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport DataState from './context/DataState';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataState>\n      <App />\n    </DataState>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}